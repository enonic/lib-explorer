plugins {
	id 'java' // Needed for assemble and build
	id 'maven-publish' // Provides publishToMavenLocal
	id 'com.enonic.xp.base' version '3.6.1'
	id 'com.enonic.defaults' version '2.1.5' // Publishing
	id 'com.github.node-gradle.node' version '7.1.0'
}

// TODO: Can be removed when xpVersion is >=7.13.0
compileJava {
	options.release = 11
}

// java {
// 	toolchain {
// 		languageVersion = JavaLanguageVersion.of(11)
// 	}
// }

// sourceCompatibility = JavaVersion.VERSION_11
// targetCompatibility = sourceCompatibility

repositories {
	mavenLocal()
	xp.enonicRepo('dev') // Not provided by com.enonic.defaults
	mavenCentral()
}


dependencies {
	compileOnly "com.enonic.xp:script-api:${xpVersion}"
	compileOnly "com.enonic.xp:core-api:${xpVersion}"

	//──────────────────────────────────────────────────────────────────────────
	// New lib-explorer-4.0.0
	//──────────────────────────────────────────────────────────────────────────
	implementation "com.enonic.xp:lib-auth:${xpVersion}"
	implementation "com.enonic.xp:lib-common:${xpVersion}"
	implementation "com.enonic.xp:lib-io:${xpVersion}"
	implementation "com.enonic.xp:lib-scheduler:${xpVersion}"
	implementation "com.enonic.xp:lib-value:${xpVersion}"
	implementation 'com.enonic.lib:lib-graphql:2.1.0'
	implementation 'com.enonic.lib:lib-guillotine:6.2.1'

	//──────────────────────────────────────────────────────────────────────────
	// Same as lib-explorer-3.x.x
	//──────────────────────────────────────────────────────────────────────────
	implementation "com.enonic.xp:lib-context:${xpVersion}"
	implementation "com.enonic.xp:lib-event:${xpVersion}"
	implementation "com.enonic.xp:lib-mail:${xpVersion}"
	implementation "com.enonic.xp:lib-node:${xpVersion}"
	implementation "com.enonic.xp:lib-portal:${xpVersion}"
	implementation "com.enonic.xp:lib-repo:${xpVersion}"
	implementation "com.enonic.xp:lib-task:${xpVersion}"
	implementation 'com.enonic.lib:lib-cache:2.2.1'
	implementation 'com.enonic.lib:lib-http-client:3.2.2'
	implementation 'com.enonic.lib:lib-license:3.1.0'

	//──────────────────────────────────────────────────────────────────────────
	// No longer needed in lib-explorer-4.0.0
	//──────────────────────────────────────────────────────────────────────────
	//include "com.enonic.xp:lib-cluster:${xpVersion}"
	//include "com.enonic.xp:lib-i18n:${xpVersion}"

	//──────────────────────────────────────────────────────────────────────────
	// Other enonic libs (com.enonic.lib)
	//──────────────────────────────────────────────────────────────────────────
	implementation 'com.enonic.lib:lib-router:3.2.0'

	//implementation 'com.enonic.lib:text-encoding:1.2.0'
	implementation 'com.enonic.lib:lib-util:3.1.1'

	// WARNING: Do NOT use compile files, jar file will be missing dependencies!
}


tasks.withType(Copy) {
	includeEmptyDirs = false
}

wrapper {
	distributionUrl = "${gradleDistributionUrl}"
}

node {
	download = true
	version = "${nodeVersion}"
}

tasks.register('npmCheck', NpmTask) {
	dependsOn npmInstall
	args = [
		'run',
		'check'
	]
	environment = [
		'FORCE_COLOR': 'true',
	]
}
check.dependsOn npmCheck

tasks.register('npmTest', NpmTask) {
	dependsOn npmInstall
	args = ['test']
	environment = [
		'FORCE_COLOR': 'true',
	]
	inputs.dir 'src/main/resources'
	inputs.dir 'test'
	outputs.dir 'coverage'
}
test.dependsOn npmTest

task cleanCoverage(type:Delete) {
	delete 'coverage'
}
clean.dependsOn cleanCoverage

tasks.register('npmBuild', NpmTask) {
	args = [
		'run',
		'build'
	]
	dependsOn npmInstall
	environment = [
		'FORCE_COLOR': 'true',
		'LOG_LEVEL_FROM_GRADLE': gradle.startParameter.logLevel.toString(),
		'NODE_ENV': project.hasProperty('dev') || project.hasProperty('development') ? 'development' : 'production'
	]
	inputs.dir 'src/main/resources'
	outputs.dir 'build/resources/main' // processResources will delete the directory if this is not present
}

processResources {
	exclude '**/*.es' // Skip /lib/nashorn/
	exclude '**/*.json' // Skip lib/@types/q-i/package.json
	exclude '**/*.ts' // Handeled by tsup
}

jar.dependsOn npmBuild
javadoc.dependsOn npmBuild
